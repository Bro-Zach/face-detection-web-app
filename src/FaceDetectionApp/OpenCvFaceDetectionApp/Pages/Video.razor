@page "/video"

<div class="card text-center">
    <div class="card-header">
        Real-Time Face Datection Demo
    </div>
    <div class="card-body">
        <div class="row justify-content-center">
            <div class="col-8">
                <img src="@videoSrc" />
            </div>
        </div>
    </div>
    <div class="card-footer">
        <div class="row justify-content-center">
            @if (cameraStarted)
            {
            <div class="col">
                <button class="btn btn-outline-secondary" @onclick="StopCapture">Stop</button>
            </div>
            }
            else
            {
            <button class="btn btn-outline-primary" @onclick="StartCapture">Start Camera</button>
            }
        </div>
    </div>
</div>


@code{
    string videoSrc;
    bool cameraStarted = false;
    CancellationTokenSource cancellationTokenSource;
    Mat frame;
    CascadeClassifier haarCascade = new CascadeClassifier("wwwroot\\haarcascade_frontalface_alt.xml");
    CascadeClassifier nestedHaarCascade = new CascadeClassifier("wwwroot\\haarcascade_eye_tree_eyeglasses.xml");

    async Task StartCapture()
    {
        cancellationTokenSource = new CancellationTokenSource();
        await Capture(cancellationTokenSource.Token);
    }

    void StopCapture()
    {
        cameraStarted = false;
        if (cancellationTokenSource?.IsCancellationRequested ?? true) return;
        cancellationTokenSource.Cancel();
    }

    async Task Capture(CancellationToken cancellationToken)
    {
        using var capture = new VideoCapture(0);
        cameraStarted = true;

        frame = new Mat();
        while (true)
        {
            if (cancellationToken.IsCancellationRequested)
                break;

            capture.Read(frame);
            if (frame.Empty())
                break;
            ProcessFrame();
            videoSrc = $"data:image/gif;base64,{frame.ToBase64String()}";
            await Task.Delay(1);
            StateHasChanged();
        }
    }


    void ProcessFrame()
    {
        Mat grayImage = new Mat();
        Cv2.CvtColor(frame, grayImage, ColorConversionCodes.BGRA2GRAY);
        Cv2.EqualizeHist(grayImage, grayImage);

        var faces = haarCascade.DetectMultiScale(
            image: grayImage,
            scaleFactor: 1.1,
            minNeighbors: 3,
            flags: HaarDetectionType.ScaleImage,
            minSize: new Size(30, 30));

        foreach (var face in faces)
        {
            Cv2.Rectangle(frame, face, Scalar.Red, 2);
        }


    }


}
